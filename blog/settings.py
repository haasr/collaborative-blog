"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from os import getenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TINYMCE_SCRIPT = getenv('BLOG_TINYMCE_SCRIPT')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('BLOG_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(getenv('BLOG_DEBUG')))

# For when simulating production but still needing
# exceptions that don't otherwise show:
DEBUG_PROPAGATE_EXCEPTIONS = bool(int(getenv('BLOG_DEBUG_PROPAGATE_EXCEPTIONS')))

ALLOWED_HOSTS = (
    '0.0.0.0',
    '127.0.0.1',
    'yoursite.com',
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'admin_pages',
    'mail_subscription',
    'site_pages',
    'site_pages_forms',
    'users',
    'anymail',
    'colorfield',
    'crispy_forms',
    'storages',
    'custom_template_tags.blogqueries',
    'custom_template_tags.texttransform',
    'custom_template_tags.twofactor',

    # django-two-factor-auth:
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'two_factor',
]

SITE_ID = 1
CRISPY_TEMPLATE_PACK = 'bootstrap4' # For Crispy forms

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_otp.middleware.OTPMiddleware',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

LOGIN_URL = 'two_factor:login'
LOGIN_REDIRECT_URL = 'admin_pages:admin_index'

ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR.joinpath('templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blog.context_processors.add_to_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': getenv('BLOG_DB_NAME'),
        'USER': getenv('BLOG_DB_USER'),
        'PASSWORD': getenv('BLOG_DB_PASS'),
        'HOST': getenv('BLOG_DB_HOST'),
        'PORT': getenv('BLOG_DB_PORT')
    }
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880 # 5 MB

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = getenv('BLOG_TIME_ZONE')

USE_I18N = True

USE_L10N = True

USE_TZ = True

# AWS settings
AWS_ACCESS_KEY_ID = getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_FILE_OVERWRITE = True
AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

# S3 static settings
STATIC_URL = '/static/'

STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

EMAIL_BACKEND = "anymail.backends.sendinblue.EmailBackend"
EMAIL_USE_SSL = True

ANYMAIL = {
    "SENDINBLUE_API_KEY": getenv('BLOG_SENDINBLUE_API_KEY'),
}

SENDINBLUE_API_URL = "https://api.sendinblue.com/v3/"